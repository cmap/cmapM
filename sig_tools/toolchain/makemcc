#!/bin/bash

# Script to compile Matlab source code using mcc
# This script should be run first and each time changes 
# are made to the source files.
QUEUE="local"
USERFLAGS=""
usageHelp="${0##*/}: Compile matlab scripts on the LSF farm.
Author: Rajiv Narayan [narayan@broadinstitute.org]

Usage: ${0##*/} [options] script.m [script2.m script3.m...]
Options:
-a Specify additional flags to MCC
-q LSF queue to submit jobs [optional], interactive, local, LSF queue. Defaults to local
-h Print this help
"
source $(dirname $0)/global_vars.sh
source "$BIN_PATH/helper.sh" 

if [ "$#" -gt 0 ]; then

#Files and paths
RootDir=$PWD
MatlabCodeDir=$RootDir
CompiledCodeDir=$RootDir/CompiledCode

# Setup build environment
source $MCC_BUILD_ENV

# Parse command line arguments
while getopts  "a:q:h" optionName; do
    case "$optionName" in
	q) QUEUE="$OPTARG"
	    shift 2
	    echo "Using queue: $QUEUE"
	    ;;
	h) printHelpAndExit
	    ;;
	a) USERFLAGS="$OPTARG"
	    shift 2
	    ;;
	[?]) printErrorHelpAndExit "Option not recognized"
	    ;;
    esac
done

# Matlab source files 
# e.g. source='file1.m file2.m file3.m'
# source='dummy.m'
# source='compute_cc.m'
#'compute_cc.m compute_svd.m compute_kmeans.m compute_pca.m readgct.m'

[ ! -d $CompiledCodeDir ] && mkdir $CompiledCodeDir

git_info()
{
    parts=(`file_parts $1`)
    cd ${parts[0]}
    git --no-pager log --max-count=1
}

mkconfig()
{
    src=$1
    of=$2
    echo "#Autogenerated by makemcc" > $of
    echo "LANGUAGE:matlab" >> $of
    date "+DATE:%b.%d.%Y %H:%M:%S %Z" >> $of
    echo "COMPILED_BY:$USER" >> $of
    src_revision=$(git --no-pager log --max-count=1 "$src" 2>/dev/null|sed -n 's/^commit //p')
    echo "SOURCE_REVISION:${src_revision:--666}" >> $of
    echo "MATLAB_ROOT:$MATLAB_ROOT" >> $of
    echo "MCR_VERSION:$MCR_VERSION" >> $of
    (cd $MORTARPATH; git --no-pager log --max-count=1)|sed -n 's/^commit /MORTAR_REVISION:/p' >> $of
    echo "GCC:$GCC_PATH" >> $of
}

# Compile code  

for f in "$@"
do
    i="${f%\.m}.m"
    if [ -f "$i" ]; then
	echo "Compiling $i"
	mkconfig $MatlabCodeDir/$i $CompiledCodeDir/${i%.m}.conf
	if [ $QUEUE = "interactive" ]; then
    # submit interactive job
	    echo bsub -q interactive -P $PROJECT -I $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i  $MCC_INCLUDE $MCC_ADD
	    bsub -q interactive -P $PROJECT -I $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i  $MCC_INCLUDE $MCC_ADD
    # bsub -q interactive -R "rusage[compiler=1:duration=1]" -I $MATLAB_ROOT/bin/mcc -nocache -d $CompiledCodeDir -m $MatlabCodeDir/$i -I $MCC_INCLUDE
	    echo "done"
	elif [ $QUEUE = "local" ]; then
	    echo Running Locally
	    echo $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i $MCC_INCLUDE $MCC_ADD
       #echo "Check nohup.out for completion"
	    nohup $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i $MCC_INCLUDE $MCC_ADD &
	    echo "nohup.out: Press Ctrl-C to quit. Compilation will continue in the background."
	    tail --pid $! -n0 -F nohup.out | while read l; do
		echo $l
	    done
	    echo "done"
	else
	    echo LSF queue
	    echo bsub -cwd $SUBMIT_PATH -q $QUEUE -P $PROJECT -N $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i $MCC_INCLUDE $MCC_ADD	    
	    bsub $SUBMIT_PATH -q $QUEUE -P $PROJECT -N $MATLAB_ROOT/bin/mcc $USERFLAGS -d $CompiledCodeDir -m $MatlabCodeDir/$i $MCC_INCLUDE $MCC_ADD
	fi
    else
	echo "File $i not found, skipping"
    fi
done

else
    printErrorHelpAndExit "Bad Arguments"
fi
