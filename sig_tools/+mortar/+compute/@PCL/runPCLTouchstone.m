function out = runPCLTouchstone(varargin)
% runPCLTouchstone : Compute PCL connectivity against Touchstone
% perturbagens

[args, help_flag] = get_args(varargin{:});

import mortar.util.Message

if ~help_flag  
    out = struct('args', args,...
             'ns_pert_cell', '',...
             'ns_pert_summary', '',...
             'ns_pcl_cell', '',...
             'ps_pcl_cell', '',...
             'ns_pcl_summary', '',...
             'ps_pcl_summary', '',...
             'pvalue_pcl_summary', '',...
             'query_info', '');
             
    %% Touchstone filepaths
    ts_rpt = mortar.compute.Gutc.getTouchStoneFiles(args.ts_path, args.pcl_set);
                          
    %% pcl_cell : 
    Message.debug(args.verbose, '# Computing PCL results per cell line');    
    out.ns_pcl_cell = mortar.compute.Gutc.aggregateSetByCell(...
                        args.ns_pert_cell,...
                        [],...
                        ts_rpt.pcl_set,...
                        'column',...
                        args.pcl_field,...
                        args.aggregate_method,...
                        args.aggregate_param);
    ns2ps_pcl_cell = parse_gctx(ts_rpt.ns2ps_pcl_cell);
    % Compute percentiles
    [out.ps_pcl_cell, out.ns_pcl_cell] = mortar.compute.Gutc.scoreToPercentile(...
        out.ns_pcl_cell,...
        ns2ps_pcl_cell, 'column');
                    
    %% pcl_summary :
    Message.debug(args.verbose, '# Computing summarized PCL results');
    out.ns_pcl_summary = mortar.compute.Gutc.aggregateSet(...
                        args.ns_pert_summary,...
                        [],...
                        ts_rpt.pcl_set,...
                        'column',...
                        args.pcl_field,...
                        args.aggregate_method,...
                        args.aggregate_param);
    ns2ps_pcl_summary = parse_gctx(ts_rpt.ns2ps_pcl_summary);
    % Compute percentiles
    [out.ps_pcl_summary, out.ns_pcl_summary] = ...
        mortar.compute.Gutc.scoreToPercentile(...
            out.ns_pcl_summary,...
            ns2ps_pcl_summary, 'column');
        
    if (args.num_permutation>0)
        Message.debug(args.verbose, ['# Computing p-value using %d ' ...
                            'permutations'], args.num_permutation);
        % Permutation p-value using size matched random sets
        ns_pert_summary = parse_gctx(args.ns_pert_summary);   
        set_size_summary = unique(ds_get_meta(out.ns_pcl_summary, 'row', 'pcl_size'));   
        rnd_ns2ps = mortar.compute.PCL.permutationPercentileTransform(ns_pert_summary,...
                                                          set_size_summary,...       
                                                          args.pcl_field,...
                                                          args.num_permutation,...
                                                          args.aggregate_method,...
                                                          args.aggregate_param);
        out.pvalue_pcl_summary = mortar.compute.PCL.permutationPValue(out.ns_pcl_summary, rnd_ns2ps);
    else
        Message.debug(args.verbose, ['Skipping p-value ' ...
                            'computation']);
    end   
end
end

function [args, help_flag] = get_args(varargin)

ConfigFile = mortar.util.File.getArgPath(mfilename, mfilename('class'));
opt = struct('prog', mfilename, 'desc', '', 'undef_action', 'ignore');
[args, help_flag ] = mortar.common.ArgParse.getArgs(ConfigFile, opt, varargin{:});

% sanity checks
if ~help_flag
    assert(isds(args.ns_pert_cell)||...
        mortar.util.File.isfile(args.ns_pert_cell),...
        'ns_pert_cell is invalid, must be a dataset or GCTx file');
    assert(isds(args.ns_pert_summary)||...
        mortar.util.File.isfile(args.ns_pert_summary),...
        'ns_pert_summary is invalid, must be a dataset or GCTx file'); 
    % required meta fields for PC
    meta_pc = parse_gctx(args.ns_pert_cell, 'annot_only', true);
    req_pc = {args.pcl_field, 'cell_id'};
    isk_pc = meta_pc.rdict.isKey(req_pc);
    disp(req_pc(~isk_pc));
    assert(all(isk_pc), 'Required meta data fields not found for ns_pert_cell');
    % required meta fields for pert summary
    meta_p = parse_gctx(args.ns_pert_summary, 'annot_only', true);
    req_p = {args.pcl_field};
    isk_p = meta_p.rdict.isKey(req_p);
    disp(req_p(~isk_p));
    assert(all(isk_p), 'Required meta data fields not found for ns_pert_summary');

end

end
