function outstruct = build_calib_plots(varargin)
%% Field names
TIME_PT = 'pert_time';
CELL_ID = 'cell_id';
TAS = 'distil_tas';
DOSE_ID = 'pert_dose';
SEED_DENSITY = 'x_density';
PERT_FIELD = 'pert_type';
DMSO_ID = 'ctl_vehicle';
UNTRT_ID = 'ctl_untrt';
% POSCON_ID variation was seen. Checks for which is present,
% but assumes only one is.
POSCON_ID = 'trt_poscon';
COMP_TRT = 'trt_cp';
EXPERIMENTAL_PARAMS = [{TIME_PT} {SEED_DENSITY}];
FIELDS = {CELL_ID, PERT_FIELD, TIME_PT, SEED_DENSITY};
isTAS = 1;

%% Input arguments
pnames = {'splitby_field', 'experimental_param','path_to_ds' , ...
    'siginfo', 'conn_to_ref', 'pcls_to_display', ...
    'save_plot', 'save_fig',  'out', 'annot_field', 'num_decimals', 'show_figure'};

dflts = {{CELL_ID},EXPERIMENTAL_PARAMS, '' ...
            '', '', '', ...
            false, false, pwd, FIELDS, 3, false};

args = parse_args(pnames, dflts, varargin{:});

FIELDS = args.annot_field;

%% Import Siginfo 
if isfileexist(args.siginfo)
   siginfo_table = parse_record(args.siginfo);
elseif isstruct(args.siginfo)
    siginfo_table = args.siginfo;
else
    error('Invalid siginfo argument');
end

%% Validate table and parameters
if ~isfield(siginfo_table, TAS) 
    dbg(1, 'TAS (%s) not found in siginfo file', TAS);
    isTAS = 0;
elseif ~isfield(siginfo_table, PERT_FIELD)
    error('Pert field (%s) not found in siginfo file', PERT_FIELD);
end

%(Verify supplied parameters are fields and have multiple values)
if ~iscell(args.experimental_param)
    experimental_param = {args.experimental_param};
else
    experimental_param = args.experimental_param;
end
if ~iscell(args.splitby_field)
    splitby_field = {args.splitby_field};
else
    splitby_field = args.splitby_field;
end

splitby_field = mortar.compute.Calib.validate_parameters(siginfo_table, ...
                    splitby_field, 1);
experimental_param = mortar.compute.Calib.validate_parameters(siginfo_table, ...
                        experimental_param, 1);

assert(~isempty(experimental_param), 'No experimental fields to plot');

nparams = length(experimental_param);
nsubs = length(splitby_field);

%Create output struct with args for plot
outstruct = struct('siginfo', '',...
     'x_variable', '', ...
    'groupby_field', '', ...
    'PlotTitle', '', ...
    'save_plot', args.save_plot, ...
    'save_fig', args.save_fig, ...
    'filename', '', ...
    'out', '', ...
    'num_decimals', args.num_decimals, ...
    'annot_field', {FIELDS}, ...
    'show_figure', args.show_figure);


%% Plot
plot_count = 1;
for ii=1:nsubs
    is_str = iscellstr({siginfo_table.(splitby_field{ii})});
    if (is_str)
        splitby_field_vals = unique({siginfo_table.(splitby_field{ii})});
    else
        splitby_field_vals = unique([siginfo_table.(splitby_field{ii})]);
    end
    nvals = length(splitby_field_vals);
    for jj = 1:nvals
        %grab subset that matches splitby_field values
        if (is_str)     %handling string/number 
            sub_table = siginfo_table(strcmp(splitby_field_vals(jj), ...
                {siginfo_table.(splitby_field{ii})}),:);
        else
            sub_table = siginfo_table(...
                splitby_field_vals(jj)==[siginfo_table.(splitby_field{ii})],:);
        end
        treatments = {POSCON_ID, COMP_TRT};
        isposcon = any(ismember({sub_table.pert_type}, treatments));
        
        %gets the correct name poscon id.        
        
        assert(isfield(sub_table, PERT_FIELD), ...
            'Required field %s is not found in siginfo file', PERT_FIELD);
        
        if (isTAS)
           %DMSO/Untreated TAS Plots
%            ctrl_logical = strcmp({sub_table.pert_type}, DMSO_ID) | ...
%                strcmp({sub_table.pert_type}, UNTRT_ID);
%            ctrl_tab = sub_table(ctrl_logical);
           
           %plot for TAS for Untreated, DMSO and Treated
           %outstruct(plot_count) =
           test = struct('siginfo', sub_table , ...
                    'x_variable', PERT_FIELD, ...
                    'groupby_field', '', ...
                    'PlotTitle', sprintf('TAS vs Pert Types (%s)',...
                    splitby_field_vals{jj}), ...
                    'save_plot', args.save_plot, ...
                    'save_fig', args.save_fig, ...
                    'filename', '', ...
                    'out', args.out, ...
                    'num_decimals', args.num_decimals, ...
                    'annot_field', {FIELDS}, ...
                    'show_figure', args.show_figure);
            outstruct(plot_count) = test;
            plot_count=plot_count+1;
            %if poscons present make poscon slice
            
            if (isposcon)  
                trt_logical = strcmp({sub_table.pert_type}, POSCON_ID) | ...
                        strcmp({sub_table.pert_type}, COMP_TRT);
                trt_tab = sub_table(trt_logical);
%                plot_TAS_from_siginfo('siginfo', trt_tab,...
%                     'x_variable', 'pert_type', 'out', args.out,...
%                     'PlotTitle','TAS distribution of poscon wells')
            end
            for ll = 1:nparams
                %TAS
                fprintf('Making TAS Plot with  %s \n', experimental_param{ll});
                
                %TAS vs experimental parameter grouped by Pert type
                outstruct(plot_count) = ...
                    struct('siginfo', sub_table , ...
                        'x_variable', experimental_param{ll}, ...
                        'groupby_field', PERT_FIELD, ...
                        'PlotTitle', sprintf('TAS vs %s (%s)',...
                        experimental_param{ll}, splitby_field_vals{jj}), ...
                        'save_plot', args.save_plot, ...
                        'save_fig', args.save_fig, ...
                        'filename', '', ...
                        'out', args.out, ...
                        'num_decimals', args.num_decimals, ...
                        'annot_field', {FIELDS}, ...
                        'show_figure', args.show_figure);
                plot_count=plot_count+1;
                
%                 if (isposcon)
%                     %Treated Cells vs experimental parameter
%                     outstruct(plot_count) = ...
%                         struct('siginfo', trt_tab , ...
%                         'x_variable', experimental_param{ll}, ...
%                         'groupby_field', '', ...
%                         'PlotTitle', sprintf('TAS vs %s Poscon', experimental_param{ll}), ...
%                         'save_plot', 1, ...
%                         'filename', '', ...
%                         'out', args.out);
%                     plot_count=plot_count+1;
%                 end
                
                %if poscons present w/ Dose
                if (isposcon)  
                    if (length(unique([trt_tab.(DOSE_ID)])) > 1)  %dose is varied
                   %TAS w/ Dose
                        fprintf('Making TAS Plot w/ dose, grouped by: %s \n', experimental_param{ll});
                        outstruct(plot_count) = ...
                            struct('siginfo', trt_tab , ...
                            'x_variable', DOSE_ID, ...
                            'groupby_field', experimental_param{ll}, ...
                            'PlotTitle', sprintf('TAS vs %s by %s (%s)', DOSE_ID, ...
                            experimental_param{ll}, splitby_field_vals{jj}), ...
                            'save_plot', args.save_plot, ...
                            'save_fig', args.save_fig, ...
                            'filename', '', ...
                            'out', args.out, ...
                            'num_decimals', args.num_decimals, ...
                            'annot_field', {FIELDS},...
                            'show_figure', args.show_figure);
                        plot_count=plot_count+1;       
                    end
               end 
            end
        end
    end

end
end
