function stats_rpt = detectOutlierReplicates(measure, replicate_group, varargin)
pnames = {'--alpha', '--is_low_good', '--measure_name'};
dflts = {0.05, true, ''};
help_str = {'Level of significance',...
    'If true low values are considered better, when selecting the tail for statistical tests',...
    'Name of measure, if provided prepended to stats fields'};
config = struct('name', pnames,...
    'default', dflts,...
    'help', help_str);
opt = struct('prog', mfilename, 'desc', 'Test for replicate outliers');
[args, help_flag] = mortar.common.ArgParse.getArgs(config, opt, varargin{:});

if args.is_low_good
    % Low values are better, test for outliers with high values
    rs_tail = 'right';
    ks_tail = 'smaller';
else
    % High values are better, test for outliers with low values
    rs_tail = 'left';
    ks_tail = 'larger';
end

measure = measure(:);
assert(isequal(length(replicate_group), length(measure)),...
    'measure and replicate_group must have the same size');

[cn, nl] = getcls(replicate_group);
if ~isempty(args.measure_name) && ischar(args.measure_name)
    median_field = sprintf('median_%s', args.measure_name);
    iqr_field = sprintf('iqr_%s', args.measure_name);
else
    median_field = 'median';
    iqr_field = 'iqr';
end

% test for statistical diff between ranks
stats_rpt = struct('replicate_id', cn,...
    'npoints', nan,...
    median_field, nan,...
    iqr_field, nan,...
    'ranksum_nlogp', nan,...
    'ranksum_h', nan,...
    'ranksum_stat', nan,...
    'ranksum_zs', nan,...
    'kstest_nlogp', nan,...
    'kstest_h', nan,...
    'kstest_stat', nan);
nrep = length(cn);
% need at least 2 groups for outlier detection
if nrep > 1
    for ii=1:nrep
        this_rep = nl == ii;
        not_this_rep = ~this_rep;
        x = measure(this_rep);
        y = measure(not_this_rep);
        %y = recall_rank;
        this_npoints = length(x);
        this_median = nanmedian(x);
        this_iqr = naniqr(x);
        
        % one-tailed Wilcoxon rank-sum test if median(x) > median(y)
        [rs_p, rs_h, rs_stats] = ranksum(x, y, 'tail', rs_tail,...
            'alpha', args.alpha);
        % one-tailed KS test if CDF(x) < CDF(y)
        [ks_h, ks_p, ks_stats] = kstest2(x, y, 'tail', ks_tail,...
            'alpha', args.alpha);
        stats_rpt = setarrayfield(stats_rpt, ii,...
            {'npoints',...
            median_field,...
            iqr_field, ...
            'ranksum_nlogp',...
            'ranksum_h',...
            'ranksum_stat',...
            'ranksum_zs',...
            'kstest_nlogp',...
            'kstest_h',...
            'kstest_stat'},...
            this_npoints,...
            this_median,...
            this_iqr,...
            -log10(rs_p), rs_h, rs_stats.ranksum, rs_stats.zval,...
            -log10(ks_p), ks_h, ks_stats);
    end
else
    warning('Need at least 2 groups for outlier detection, got 1 : %s', cn{1});
end