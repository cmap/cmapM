function runAnalysis_(obj, varargin)
args = obj.getArgs;
obj.res_ = main(args);
end

function res = main(args)
% Main function
    import mortar.util.Message

    %% Run Cmap query
    if isempty(args.query_result)    
        Message.log(args.verbose, '# Running Cmap query');
        query_result = mortar.compute.Connectivity.runCmapQuery(...
            'score', args.score, ...
            'rank', args.rank, ...
            'uptag', args.up,...
            'dntag', args.down,...
            'es_tail', args.es_tail,...
            'row_space', args.feature_space,...
            'metric', 'wtcs');
    else
        query_result = loadQueryResultMatrix(args.query_result);
    end
    
    %% Run GUTC
    % Note that background is 'lm' regardless of what space the
    % query was run in (query_feature_space = 'lm').
    % also the background was computed using es_tail='both'
    if args.is_matched
        Message.log(args.verbose, '# Running GUTC in Matched mode');
        gutc_opt = struct('cs', query_result.cs,...
                          'bkg_path', args.bkg_path,...
                          'pcl_set', args.pcl_set,...
                          'aggregate_method', 'maxq',...
                          'aggregate_param', struct('q_low', 33, 'q_high', 67),...
                          'query_feature_space', 'lm',...
                          'col_meta', args.query_meta,...
                          'match_rid_field', 'pert_id',...
                          'match_cid_field', {args.match_group});
        gutc_opt = args2cell(gutc_opt);    
        gutc_result = mortar.compute.Gutc.runMatchedGutcV2(gutc_opt{:});
    else
        Message.log(args.verbose, '# Running GUTC in UnMatched mode');
        gutc_opt = struct('cs', query_result.cs,...
                          'bkg_path', args.bkg_path,...
                          'pcl_set', args.pcl_set,...
                          'aggregate_method', 'maxq',...
                          'aggregate_param', struct('q_low', 33, 'q_high', 67),...
                          'query_feature_space', 'lm',...
                          'col_meta', args.query_meta);
        gutc_opt = args2cell(gutc_opt);    
        gutc_result = mortar.compute.Gutc.runUnmatchedGutc(gutc_opt{:});
    end    
    res = struct('args', args,...
                 'query_result', query_result,...
                 'gutc_result', gutc_result);
    
end

function query_result = loadQueryResultMatrix(query_result)
% read pre-computed query result(s) from folder
assert(mortar.util.File.isfile(query_result, 'file'),...
    'Query result file: %s', query_result); 
cs = parse_gctx(query_result);

query_result = struct('args', '',...
                      'uptag', '',...
                      'dntag', '',...
                      'cs', cs,...
                      'cs_up', '',...
                      'cs_dn', '',...
                      'leadf_up', '',...
                      'leadf_dn', '');
                  
end

function query_result = loadQueryResult(qres_folder)
% read pre-computed query result(s) from folder
assert(mortar.util.File.isfile(qres_folder, 'dir'),...
    'Query result folder not found: %s', qres_folder); 
query_result = struct('args', '',...
                      'uptag', '',...
                      'dntag', '',...
                      'cs', '',...
                      'cs_up', '',...
                      'cs_dn', '',...
                      'leadf_up', '',...
                      'leadf_dn', '');
field_name = {'args',...
 'uptag',...
 'dntag',...
 'cs'};
file_name={{'*_params.txt', @parse_param}...
        {'query_up*.gmt', @parse_geneset}...
        {'query_dn*.gmt', @parse_geneset}...
        {'result_*COMBINED*.gct*', @parse_gctx}};
file_lut = mortar.containers.Dict(field_name, file_name);

k = file_lut.keys;
for ii=1:length(k)
    v = file_lut(k{ii});    
    target_file = fullfile(qres_folder, v{1}{1});
    [~, file_path] = find_file(target_file);
    if ~isempty(file_path)
        query_result.(k{ii}) = feval(v{1}{2}, file_path{1});
    else
        mortar.util.Message.debug(1,...
            'Query result file: %s missing, skipping', target_file); 
    end
end
end

