
#line 1 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
#include "config.h"

#include <string>
#include <fstream>
#include <iostream>
#include <cstdlib>
// New for directory recursion
#ifdef WIN32
	#include <dirent_msvc.h>
#else
	#include <dirent.h>
#endif


using std::cin;
using std::cout;
using std::cerr;
using std::ifstream;
using std::ofstream;
using std::string;
using std::ios_base;
using std::endl;


#line 28 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
static const char _PostProcess_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	3, 1, 4, 1, 5, 1, 6, 1, 
	7, 1, 8, 1, 9, 1, 10, 1, 
	11, 1, 12, 1, 13, 1, 14, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 1, 22, 1, 
	23, 1, 24, 1, 25, 1, 26, 1, 
	27, 1, 28, 1, 29, 1, 30, 1, 
	31, 1, 32, 1, 33, 1, 34, 1, 
	35, 1, 36, 1, 37, 1, 38, 1, 
	39, 1, 44, 1, 45, 1, 46, 1, 
	47, 1, 48, 1, 49, 1, 50, 1, 
	51, 1, 52, 1, 53, 1, 54, 1, 
	55, 1, 56, 1, 57, 1, 58, 1, 
	59, 1, 60, 1, 61, 1, 62, 1, 
	63, 1, 64, 1, 65, 1, 66, 2, 
	2, 40, 2, 2, 41, 2, 2, 42, 
	2, 2, 43
};

static const short _PostProcess_key_offsets[] = {
	0, 0, 1, 2, 3, 4, 5, 6, 
	7, 8, 9, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	30, 31, 32, 33, 34, 35, 36, 37, 
	38, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 56, 57, 58, 59, 60, 62, 63, 
	64, 65, 66, 67, 68, 69, 70, 71, 
	72, 73, 74, 75, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 91, 92, 93, 94, 95, 96, 
	97, 98, 99, 100, 101, 102, 103, 104, 
	106, 107, 108, 109, 110, 111, 112, 113, 
	114, 115, 116, 123, 125, 126, 127, 128, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	138, 139, 140, 141, 142, 143, 144, 145, 
	146, 147, 148, 149, 150, 151, 152, 153, 
	154, 155, 156, 157, 159, 160, 161, 163, 
	164, 165, 166, 167, 169, 170, 172, 174, 
	176, 178, 180, 182, 184, 186, 188, 190, 
	192, 194, 196, 198, 200, 202, 204, 206, 
	208, 210, 211, 215, 216, 217, 218, 219, 
	221, 222, 223, 224, 225, 227, 228, 229, 
	230, 231, 232, 233, 234, 235, 236, 237, 
	238, 239, 240, 241, 242, 243, 244, 245, 
	246, 247, 248, 249, 250, 251, 252, 253, 
	254, 255, 256, 257, 258, 259, 260, 261, 
	262, 263, 264, 265, 287, 304, 305, 306, 
	307, 308, 309, 310, 328, 348, 366, 384, 
	402, 420, 438, 456, 474, 492, 510, 528, 
	546, 564, 582, 600, 618, 636, 654, 672, 
	689, 707, 725, 745, 763, 781, 799, 817, 
	836, 854, 872, 890, 908, 926, 944, 962, 
	963, 981, 999, 1017, 1035, 1053, 1071, 1089, 
	1107, 1125, 1143, 1161, 1179, 1197, 1215, 1216, 
	1226, 1235, 1237, 1239, 1240, 1250, 1260, 1270, 
	1280, 1290, 1300, 1310, 1320, 1330, 1340, 1350, 
	1360, 1370, 1380, 1390, 1400, 1410, 1420, 1430, 
	1439, 1447, 1450, 1451, 1454, 1463, 1466, 1470, 
	1471, 1478, 1486, 1495, 1504, 1512, 1520, 1528, 
	1537
};

static const char _PostProcess_trans_keys[] = {
	116, 59, 36, 60, 36, 58, 58, 58, 
	48, 45, 92, 95, 109, 65, 90, 97, 
	122, 109, 116, 111, 99, 92, 45, 92, 
	95, 92, 45, 115, 117, 98, 115, 116, 
	92, 45, 92, 95, 111, 99, 95, 115, 
	117, 98, 115, 116, 58, 58, 92, 45, 
	83, 117, 98, 115, 116, 42, 73, 83, 
	110, 110, 101, 114, 83, 92, 45, 117, 
	98, 115, 116, 92, 95, 92, 45, 115, 
	117, 98, 115, 116, 92, 45, 92, 95, 
	92, 45, 115, 117, 98, 115, 116, 95, 
	58, 92, 115, 45, 115, 117, 98, 115, 
	116, 105, 116, 117, 116, 101, 42, 36, 
	36, 38, 62, 36, 103, 116, 59, 36, 
	116, 59, 116, 59, 45, 92, 95, 65, 
	90, 97, 122, 60, 62, 36, 58, 36, 
	103, 108, 116, 59, 116, 59, 98, 114, 
	32, 99, 108, 97, 115, 115, 61, 34, 
	116, 121, 112, 101, 98, 114, 101, 97, 
	107, 34, 47, 62, 42, 60, 62, 36, 
	36, 103, 108, 116, 59, 116, 59, 62, 
	98, 62, 62, 114, 32, 62, 62, 99, 
	62, 108, 62, 97, 62, 115, 62, 115, 
	61, 62, 34, 62, 62, 116, 62, 121, 
	62, 112, 62, 101, 62, 98, 62, 114, 
	62, 101, 62, 97, 62, 107, 34, 62, 
	47, 62, 62, 32, 44, 9, 10, 42, 
	108, 104, 115, 73, 92, 110, 110, 101, 
	114, 83, 92, 117, 98, 115, 116, 42, 
	45, 83, 45, 73, 92, 45, 116, 115, 
	98, 117, 115, 92, 45, 92, 95, 92, 
	45, 99, 111, 116, 109, 95, 116, 115, 
	98, 117, 115, 95, 99, 111, 116, 109, 
	95, 32, 36, 38, 40, 41, 44, 58, 
	62, 92, 95, 109, 110, 123, 125, 9, 
	10, 45, 46, 59, 60, 91, 93, 32, 
	36, 38, 62, 91, 93, 95, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	108, 58, 61, 58, 45, 116, 32, 36, 
	38, 45, 62, 91, 93, 95, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 97, 
	108, 116, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	91, 93, 95, 116, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 108, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 97, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 32, 36, 38, 62, 91, 93, 
	95, 98, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	91, 93, 95, 116, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 121, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 112, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 32, 36, 38, 62, 91, 93, 
	95, 101, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	91, 93, 95, 115, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 117, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 98, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 32, 36, 38, 62, 91, 93, 
	95, 115, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	91, 93, 95, 116, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 105, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 116, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 32, 36, 38, 62, 91, 93, 
	95, 117, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	91, 93, 95, 116, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 101, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 32, 36, 38, 62, 91, 93, 95, 
	104, 123, 125, 9, 10, 40, 41, 44, 
	46, 58, 60, 32, 36, 38, 62, 91, 
	93, 95, 115, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	62, 73, 83, 92, 95, 123, 125, 9, 
	10, 40, 41, 44, 46, 58, 60, 91, 
	93, 32, 36, 38, 62, 91, 93, 95, 
	110, 123, 125, 9, 10, 40, 41, 44, 
	46, 58, 60, 32, 36, 38, 62, 91, 
	93, 95, 110, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	62, 91, 93, 95, 101, 123, 125, 9, 
	10, 40, 41, 44, 46, 58, 60, 32, 
	36, 38, 62, 91, 93, 95, 114, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 32, 36, 38, 62, 83, 92, 95, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 91, 93, 32, 36, 38, 62, 
	91, 93, 95, 117, 123, 125, 9, 10, 
	40, 41, 44, 46, 58, 60, 32, 36, 
	38, 62, 91, 93, 95, 98, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 62, 91, 93, 95, 115, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 32, 36, 38, 62, 91, 93, 
	95, 116, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 32, 36, 38, 62, 
	92, 95, 123, 125, 9, 10, 40, 41, 
	44, 46, 58, 60, 91, 93, 32, 36, 
	38, 42, 62, 91, 93, 95, 123, 125, 
	9, 10, 40, 41, 44, 46, 58, 60, 
	32, 36, 38, 45, 62, 91, 93, 95, 
	123, 125, 9, 10, 40, 41, 44, 46, 
	58, 60, 92, 32, 36, 38, 62, 91, 
	93, 95, 117, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	62, 91, 93, 95, 98, 123, 125, 9, 
	10, 40, 41, 44, 46, 58, 60, 32, 
	36, 38, 62, 91, 93, 95, 115, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 32, 36, 38, 62, 91, 93, 95, 
	116, 123, 125, 9, 10, 40, 41, 44, 
	46, 58, 60, 32, 36, 38, 45, 62, 
	91, 93, 95, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	62, 91, 93, 95, 111, 123, 125, 9, 
	10, 40, 41, 44, 46, 58, 60, 32, 
	36, 38, 62, 91, 93, 95, 99, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 32, 36, 38, 62, 92, 95, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 91, 93, 32, 36, 38, 45, 62, 
	91, 93, 95, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	62, 91, 93, 95, 111, 123, 125, 9, 
	10, 40, 41, 44, 46, 58, 60, 32, 
	36, 38, 62, 91, 93, 95, 114, 123, 
	125, 9, 10, 40, 41, 44, 46, 58, 
	60, 32, 36, 38, 62, 91, 93, 95, 
	101, 123, 125, 9, 10, 40, 41, 44, 
	46, 58, 60, 32, 36, 38, 62, 91, 
	93, 95, 116, 123, 125, 9, 10, 40, 
	41, 44, 46, 58, 60, 32, 36, 38, 
	58, 62, 91, 93, 95, 123, 125, 9, 
	10, 40, 41, 44, 46, 59, 60, 92, 
	32, 36, 38, 44, 58, 60, 62, 109, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 9, 10, 60, 62, 103, 108, 58, 
	32, 36, 38, 44, 58, 60, 62, 97, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 116, 9, 10, 32, 36, 38, 44, 
	58, 60, 62, 108, 9, 10, 32, 36, 
	38, 44, 58, 60, 62, 97, 9, 10, 
	32, 36, 38, 44, 58, 60, 62, 98, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 116, 9, 10, 32, 36, 38, 44, 
	58, 60, 62, 121, 9, 10, 32, 36, 
	38, 44, 58, 60, 62, 112, 9, 10, 
	32, 36, 38, 44, 58, 60, 62, 101, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 115, 9, 10, 32, 36, 38, 44, 
	58, 60, 62, 117, 9, 10, 32, 36, 
	38, 44, 58, 60, 62, 98, 9, 10, 
	32, 36, 38, 44, 58, 60, 62, 115, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 116, 9, 10, 32, 36, 38, 44, 
	58, 60, 62, 105, 9, 10, 32, 36, 
	38, 44, 58, 60, 62, 116, 9, 10, 
	32, 36, 38, 44, 58, 60, 62, 117, 
	9, 10, 32, 36, 38, 44, 58, 60, 
	62, 116, 9, 10, 32, 36, 38, 44, 
	58, 60, 62, 101, 9, 10, 32, 36, 
	38, 44, 58, 60, 62, 9, 10, 32, 
	36, 38, 44, 60, 92, 9, 10, 32, 
	9, 10, 58, 0, 36, 38, 32, 36, 
	38, 44, 60, 92, 109, 9, 10, 32, 
	9, 10, 32, 44, 9, 10, 92, 45, 
	92, 95, 65, 90, 97, 122, 45, 92, 
	48, 57, 65, 90, 97, 122, 45, 92, 
	95, 48, 57, 65, 90, 97, 122, 45, 
	92, 109, 48, 57, 65, 90, 97, 122, 
	45, 92, 48, 57, 65, 90, 97, 122, 
	45, 92, 48, 57, 65, 90, 97, 122, 
	45, 92, 48, 57, 65, 90, 97, 122, 
	45, 92, 95, 48, 57, 65, 90, 97, 
	122, 109, 0
};

static const char _PostProcess_single_lengths[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 2, 1, 1, 1, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 2, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 2, 1, 1, 1, 1, 2, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 9, 1, 1, 1, 
	1, 1, 1, 10, 12, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 10, 
	10, 10, 10, 10, 10, 10, 10, 9, 
	10, 10, 10, 10, 10, 10, 10, 9, 
	10, 10, 10, 10, 8, 10, 10, 1, 
	10, 10, 10, 10, 10, 10, 10, 8, 
	10, 10, 10, 10, 10, 10, 1, 8, 
	7, 2, 2, 1, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 7, 
	6, 1, 1, 3, 7, 1, 2, 1, 
	3, 2, 3, 3, 2, 2, 2, 3, 
	1
};

static const char _PostProcess_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 2, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 4, 4, 0, 0, 0, 
	0, 0, 0, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 5, 4, 4, 4, 4, 5, 
	4, 4, 4, 4, 5, 4, 4, 0, 
	4, 4, 4, 4, 4, 4, 4, 5, 
	4, 4, 4, 4, 4, 4, 0, 1, 
	1, 0, 0, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 0, 0, 1, 1, 1, 0, 
	2, 3, 3, 3, 3, 3, 3, 3, 
	0
};

static const short _PostProcess_index_offsets[] = {
	0, 0, 2, 4, 6, 8, 10, 12, 
	14, 16, 18, 25, 27, 29, 31, 33, 
	35, 37, 39, 41, 43, 45, 47, 49, 
	51, 53, 55, 57, 59, 61, 63, 65, 
	67, 69, 71, 73, 75, 77, 79, 81, 
	83, 85, 87, 89, 91, 93, 95, 97, 
	99, 102, 104, 106, 108, 110, 113, 115, 
	117, 119, 121, 123, 125, 127, 129, 131, 
	133, 135, 137, 139, 141, 143, 145, 147, 
	149, 151, 153, 155, 157, 159, 161, 163, 
	165, 167, 170, 172, 174, 176, 178, 180, 
	182, 184, 186, 188, 190, 192, 194, 196, 
	199, 201, 203, 205, 207, 209, 211, 213, 
	215, 217, 219, 225, 228, 230, 232, 234, 
	237, 239, 241, 243, 245, 247, 249, 251, 
	253, 255, 257, 259, 261, 263, 265, 267, 
	269, 271, 273, 275, 277, 279, 281, 283, 
	285, 287, 289, 291, 294, 296, 298, 301, 
	303, 305, 307, 309, 312, 314, 317, 320, 
	323, 326, 329, 332, 335, 338, 341, 344, 
	347, 350, 353, 356, 359, 362, 365, 368, 
	371, 374, 376, 380, 382, 384, 386, 388, 
	391, 393, 395, 397, 399, 402, 404, 406, 
	408, 410, 412, 414, 416, 418, 420, 422, 
	424, 426, 428, 430, 432, 434, 436, 438, 
	440, 442, 444, 446, 448, 450, 452, 454, 
	456, 458, 460, 462, 464, 466, 468, 470, 
	472, 474, 476, 478, 497, 511, 513, 515, 
	517, 519, 521, 523, 538, 555, 570, 585, 
	600, 615, 630, 645, 660, 675, 690, 705, 
	720, 735, 750, 765, 780, 795, 810, 825, 
	839, 854, 869, 885, 900, 915, 930, 945, 
	960, 975, 990, 1005, 1020, 1034, 1049, 1064, 
	1066, 1081, 1096, 1111, 1126, 1141, 1156, 1171, 
	1185, 1200, 1215, 1230, 1245, 1260, 1275, 1277, 
	1287, 1296, 1299, 1302, 1304, 1314, 1324, 1334, 
	1344, 1354, 1364, 1374, 1384, 1394, 1404, 1414, 
	1424, 1434, 1444, 1454, 1464, 1474, 1484, 1494, 
	1503, 1511, 1514, 1516, 1520, 1529, 1532, 1536, 
	1538, 1544, 1550, 1557, 1564, 1570, 1576, 1582, 
	1589
};

static const short _PostProcess_indicies[] = {
	1, 0, 2, 0, 3, 0, 4, 0, 
	5, 0, 6, 0, 7, 0, 8, 0, 
	9, 0, 10, 11, 10, 12, 10, 10, 
	0, 14, 13, 15, 13, 16, 13, 17, 
	13, 18, 13, 19, 13, 20, 13, 21, 
	13, 22, 13, 23, 13, 24, 13, 25, 
	13, 26, 13, 27, 13, 28, 13, 29, 
	13, 30, 13, 31, 13, 32, 13, 34, 
	33, 35, 33, 36, 33, 37, 33, 38, 
	33, 39, 33, 40, 33, 31, 33, 42, 
	41, 43, 41, 44, 41, 45, 41, 46, 
	41, 47, 41, 48, 41, 49, 41, 50, 
	41, 52, 51, 53, 54, 41, 55, 41, 
	56, 41, 57, 41, 58, 41, 46, 59, 
	41, 60, 41, 61, 41, 62, 41, 63, 
	41, 64, 41, 65, 41, 66, 41, 67, 
	41, 68, 41, 69, 41, 70, 41, 71, 
	41, 72, 41, 73, 41, 74, 41, 75, 
	41, 76, 41, 77, 41, 78, 41, 79, 
	41, 80, 41, 81, 41, 82, 41, 83, 
	41, 84, 41, 79, 41, 85, 41, 86, 
	87, 41, 88, 41, 87, 41, 89, 41, 
	90, 41, 91, 41, 92, 41, 93, 41, 
	94, 41, 95, 41, 96, 41, 97, 41, 
	99, 98, 101, 100, 102, 103, 101, 104, 
	100, 105, 100, 106, 100, 107, 100, 105, 
	100, 108, 100, 109, 100, 108, 100, 110, 
	100, 101, 100, 111, 111, 111, 111, 111, 
	100, 112, 114, 113, 115, 113, 117, 116, 
	118, 113, 119, 120, 113, 121, 113, 118, 
	113, 122, 113, 115, 113, 123, 113, 124, 
	113, 125, 113, 126, 113, 127, 113, 128, 
	113, 129, 113, 130, 113, 131, 113, 132, 
	113, 133, 113, 134, 113, 135, 113, 136, 
	113, 137, 113, 138, 113, 139, 113, 140, 
	113, 141, 113, 142, 113, 143, 113, 144, 
	113, 145, 113, 146, 147, 113, 148, 113, 
	149, 113, 150, 151, 113, 152, 113, 149, 
	113, 153, 113, 148, 113, 155, 156, 154, 
	155, 154, 155, 157, 154, 158, 155, 154, 
	155, 159, 154, 155, 160, 154, 155, 161, 
	154, 155, 162, 154, 155, 163, 154, 164, 
	155, 154, 165, 155, 154, 155, 166, 154, 
	155, 167, 154, 155, 168, 154, 155, 169, 
	154, 155, 170, 154, 155, 171, 154, 155, 
	172, 154, 155, 173, 154, 155, 174, 154, 
	175, 155, 154, 176, 155, 154, 177, 154, 
	179, 180, 179, 178, 181, 113, 182, 113, 
	183, 113, 184, 113, 185, 186, 113, 187, 
	113, 188, 113, 189, 113, 190, 113, 191, 
	192, 113, 193, 113, 194, 113, 195, 113, 
	196, 113, 198, 197, 199, 113, 191, 113, 
	200, 113, 185, 113, 202, 201, 203, 201, 
	204, 201, 205, 201, 206, 201, 207, 201, 
	208, 201, 209, 201, 210, 201, 211, 201, 
	212, 201, 213, 201, 214, 201, 215, 201, 
	216, 201, 217, 201, 218, 201, 220, 219, 
	221, 219, 222, 219, 223, 219, 224, 219, 
	225, 219, 226, 219, 227, 219, 228, 219, 
	229, 219, 230, 219, 231, 219, 233, 233, 
	234, 235, 236, 235, 237, 235, 238, 233, 
	239, 240, 233, 233, 233, 233, 233, 233, 
	232, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 13, 13, 13, 13, 232, 242, 
	241, 243, 241, 244, 241, 245, 241, 45, 
	246, 247, 246, 248, 248, 248, 249, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 232, 248, 248, 248, 248, 248, 248, 
	248, 250, 251, 252, 248, 248, 248, 248, 
	248, 248, 232, 248, 248, 248, 248, 248, 
	248, 248, 253, 248, 248, 248, 248, 248, 
	248, 232, 248, 248, 248, 248, 248, 248, 
	248, 254, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 248, 248, 248, 248, 
	255, 248, 248, 248, 248, 248, 248, 232, 
	248, 248, 248, 248, 248, 248, 248, 256, 
	248, 248, 248, 248, 248, 248, 232, 248, 
	248, 248, 248, 248, 248, 248, 257, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 248, 248, 248, 248, 258, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 259, 248, 248, 248, 
	248, 248, 248, 232, 248, 248, 248, 248, 
	248, 248, 248, 260, 248, 248, 248, 248, 
	248, 248, 232, 248, 248, 248, 248, 248, 
	248, 248, 261, 248, 248, 248, 248, 248, 
	248, 232, 248, 248, 248, 248, 248, 248, 
	248, 262, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 248, 248, 248, 248, 
	263, 248, 248, 248, 248, 248, 248, 232, 
	248, 248, 248, 248, 248, 248, 248, 264, 
	248, 248, 248, 248, 248, 248, 232, 248, 
	248, 248, 248, 248, 248, 248, 265, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 248, 248, 248, 248, 266, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 267, 248, 248, 248, 
	248, 248, 248, 232, 248, 248, 248, 248, 
	248, 248, 248, 268, 248, 248, 248, 248, 
	248, 248, 232, 248, 248, 248, 248, 248, 
	248, 248, 269, 248, 248, 248, 248, 248, 
	248, 232, 248, 248, 248, 248, 248, 248, 
	248, 270, 248, 248, 248, 248, 248, 248, 
	232, 272, 271, 271, 271, 271, 271, 271, 
	271, 271, 271, 271, 271, 271, 232, 248, 
	248, 248, 248, 248, 248, 248, 273, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 248, 248, 248, 248, 274, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 275, 276, 277, 248, 248, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 278, 248, 248, 248, 
	248, 248, 248, 232, 248, 248, 248, 248, 
	248, 248, 248, 279, 248, 248, 248, 248, 
	248, 248, 232, 248, 248, 248, 248, 248, 
	248, 248, 280, 248, 248, 248, 248, 248, 
	248, 232, 248, 248, 248, 248, 248, 248, 
	248, 281, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 248, 282, 283, 248, 
	248, 248, 248, 248, 248, 248, 248, 232, 
	248, 248, 248, 248, 248, 248, 248, 284, 
	248, 248, 248, 248, 248, 248, 232, 248, 
	248, 248, 248, 248, 248, 248, 285, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 248, 248, 248, 248, 286, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 287, 248, 248, 248, 
	248, 248, 248, 232, 288, 288, 288, 288, 
	289, 288, 288, 288, 288, 288, 288, 288, 
	288, 232, 248, 248, 248, 290, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 60, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 232, 
	291, 288, 248, 248, 248, 248, 248, 248, 
	248, 292, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 248, 248, 248, 248, 
	293, 248, 248, 248, 248, 248, 248, 232, 
	248, 248, 248, 248, 248, 248, 248, 294, 
	248, 248, 248, 248, 248, 248, 232, 248, 
	248, 248, 248, 248, 248, 248, 295, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 296, 248, 248, 248, 248, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 297, 248, 248, 248, 
	248, 248, 248, 232, 248, 248, 248, 248, 
	248, 248, 248, 298, 248, 248, 248, 248, 
	248, 248, 232, 248, 248, 248, 248, 299, 
	300, 248, 248, 248, 248, 248, 248, 248, 
	232, 248, 248, 248, 301, 248, 248, 248, 
	248, 248, 248, 248, 248, 248, 248, 232, 
	248, 248, 248, 248, 248, 248, 248, 302, 
	248, 248, 248, 248, 248, 248, 232, 248, 
	248, 248, 248, 248, 248, 248, 303, 248, 
	248, 248, 248, 248, 248, 232, 248, 248, 
	248, 248, 248, 248, 248, 304, 248, 248, 
	248, 248, 248, 248, 232, 248, 248, 248, 
	248, 248, 248, 248, 305, 248, 248, 248, 
	248, 248, 248, 232, 248, 248, 248, 306, 
	248, 248, 248, 248, 248, 248, 248, 248, 
	248, 248, 232, 308, 307, 310, 311, 312, 
	313, 314, 310, 310, 315, 310, 309, 316, 
	316, 316, 316, 316, 316, 316, 316, 309, 
	318, 319, 317, 320, 321, 317, 322, 317, 
	316, 316, 316, 316, 316, 316, 316, 323, 
	316, 309, 316, 316, 316, 316, 316, 316, 
	316, 324, 316, 309, 316, 316, 316, 316, 
	316, 316, 316, 325, 316, 309, 316, 316, 
	316, 316, 316, 316, 316, 326, 316, 309, 
	316, 316, 316, 316, 316, 316, 316, 327, 
	316, 309, 316, 316, 316, 316, 316, 316, 
	316, 328, 316, 309, 316, 316, 316, 316, 
	316, 316, 316, 329, 316, 309, 316, 316, 
	316, 316, 316, 316, 316, 330, 316, 309, 
	316, 316, 316, 316, 316, 316, 316, 331, 
	316, 309, 316, 316, 316, 316, 316, 316, 
	316, 332, 316, 309, 316, 316, 316, 316, 
	316, 316, 316, 333, 316, 309, 316, 316, 
	316, 316, 316, 316, 316, 334, 316, 309, 
	316, 316, 316, 316, 316, 316, 316, 335, 
	316, 309, 316, 316, 316, 316, 316, 316, 
	316, 336, 316, 309, 316, 316, 316, 316, 
	316, 316, 316, 337, 316, 309, 316, 316, 
	316, 316, 316, 316, 316, 338, 316, 309, 
	316, 316, 316, 316, 316, 316, 316, 339, 
	316, 309, 316, 316, 316, 316, 316, 316, 
	316, 340, 316, 309, 316, 316, 316, 316, 
	316, 316, 316, 341, 316, 309, 343, 342, 
	342, 342, 342, 342, 342, 342, 309, 344, 
	345, 346, 347, 348, 349, 344, 113, 344, 
	344, 350, 352, 351, 353, 353, 353, 347, 
	354, 355, 356, 357, 358, 359, 360, 354, 
	113, 354, 354, 361, 179, 180, 179, 362, 
	364, 363, 365, 366, 367, 365, 365, 113, 
	365, 365, 365, 365, 365, 368, 369, 365, 
	370, 365, 365, 365, 368, 365, 365, 371, 
	365, 365, 365, 368, 365, 372, 365, 365, 
	365, 368, 373, 365, 365, 365, 365, 368, 
	365, 374, 365, 365, 365, 368, 365, 365, 
	375, 365, 365, 365, 368, 377, 376, 0
};

static const short _PostProcess_trans_targs[] = {
	219, 2, 3, 4, 5, 6, 7, 219, 
	219, 219, 219, 225, 226, 219, 12, 13, 
	14, 15, 16, 17, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	219, 219, 31, 32, 33, 34, 35, 36, 
	37, 219, 39, 40, 41, 11, 43, 44, 
	45, 46, 263, 219, 219, 49, 55, 50, 
	51, 52, 53, 54, 42, 56, 57, 58, 
	219, 60, 61, 62, 63, 64, 65, 66, 
	67, 68, 69, 70, 71, 72, 73, 219, 
	75, 76, 77, 78, 79, 81, 82, 84, 
	83, 85, 86, 87, 88, 89, 90, 91, 
	92, 278, 219, 219, 279, 95, 96, 98, 
	97, 279, 99, 100, 279, 103, 105, 279, 
	108, 0, 110, 306, 304, 304, 304, 112, 
	114, 113, 115, 117, 118, 119, 120, 121, 
	122, 123, 124, 125, 126, 127, 128, 129, 
	130, 131, 132, 133, 134, 135, 136, 137, 
	304, 304, 140, 141, 308, 308, 143, 145, 
	144, 146, 148, 308, 149, 150, 151, 152, 
	153, 154, 155, 156, 157, 158, 159, 160, 
	161, 162, 163, 164, 165, 166, 167, 168, 
	169, 310, 308, 170, 308, 308, 173, 174, 
	175, 176, 188, 177, 178, 179, 180, 181, 
	186, 182, 183, 184, 311, 308, 308, 187, 
	189, 312, 191, 192, 193, 194, 195, 196, 
	197, 198, 199, 200, 201, 202, 203, 204, 
	205, 206, 312, 312, 208, 209, 210, 211, 
	212, 213, 214, 215, 216, 217, 218, 312, 
	220, 219, 221, 222, 223, 224, 227, 228, 
	273, 219, 1, 8, 9, 10, 219, 30, 
	219, 38, 229, 248, 269, 230, 231, 232, 
	233, 234, 235, 236, 237, 238, 239, 240, 
	241, 242, 243, 244, 245, 246, 247, 219, 
	219, 249, 250, 251, 264, 268, 252, 253, 
	254, 255, 256, 262, 257, 258, 259, 260, 
	219, 261, 220, 47, 265, 266, 267, 220, 
	48, 270, 271, 272, 74, 59, 274, 275, 
	276, 277, 80, 219, 93, 280, 279, 281, 
	282, 279, 283, 284, 279, 279, 94, 101, 
	102, 104, 106, 285, 286, 287, 288, 289, 
	290, 291, 292, 293, 294, 295, 296, 297, 
	298, 299, 300, 301, 302, 303, 279, 279, 
	305, 107, 111, 307, 116, 138, 304, 304, 
	109, 304, 309, 139, 142, 308, 147, 171, 
	172, 308, 308, 308, 185, 313, 314, 320, 
	312, 315, 312, 316, 317, 318, 319, 190, 
	312, 207
};

static const unsigned char _PostProcess_trans_actions[] = {
	123, 0, 0, 0, 0, 0, 0, 95, 
	93, 99, 97, 133, 133, 125, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	89, 119, 0, 0, 0, 0, 0, 0, 
	0, 121, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 115, 83, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	81, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 87, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 117, 85, 25, 0, 0, 0, 
	0, 13, 0, 0, 17, 0, 0, 9, 
	0, 0, 0, 5, 41, 27, 29, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	31, 33, 0, 0, 43, 47, 0, 0, 
	0, 0, 0, 53, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 5, 65, 0, 49, 55, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 5, 63, 45, 0, 
	0, 79, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 71, 77, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 69, 
	136, 101, 5, 5, 5, 5, 136, 0, 
	0, 113, 0, 0, 0, 0, 109, 0, 
	111, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 107, 
	91, 0, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	103, 0, 130, 0, 0, 0, 0, 127, 
	0, 0, 5, 5, 0, 0, 0, 0, 
	0, 5, 0, 105, 0, 0, 11, 5, 
	5, 15, 5, 0, 21, 23, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 19, 7, 
	0, 0, 0, 0, 0, 0, 39, 35, 
	0, 37, 0, 0, 0, 51, 0, 0, 
	0, 59, 61, 57, 0, 0, 0, 5, 
	75, 0, 67, 0, 0, 0, 5, 0, 
	73, 0
};

static const unsigned char _PostProcess_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 0, 0, 0, 1, 0, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const unsigned char _PostProcess_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 0, 0, 0, 3, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _PostProcess_eof_trans[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 
	14, 14, 14, 14, 14, 14, 34, 34, 
	34, 34, 34, 34, 34, 34, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 52, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 42, 42, 42, 
	42, 42, 42, 42, 42, 99, 101, 101, 
	101, 101, 101, 101, 101, 101, 101, 101, 
	101, 101, 101, 0, 0, 117, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 179, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 198, 0, 0, 0, 0, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 202, 
	202, 202, 202, 202, 202, 202, 202, 220, 
	220, 220, 220, 220, 220, 220, 220, 220, 
	220, 220, 220, 0, 14, 242, 242, 242, 
	242, 247, 247, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 249, 272, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 289, 249, 249, 289, 
	249, 249, 249, 249, 249, 249, 249, 249, 
	249, 249, 249, 249, 249, 249, 308, 0, 
	317, 318, 318, 318, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 317, 
	317, 317, 317, 317, 317, 317, 317, 343, 
	0, 351, 352, 354, 0, 362, 363, 364, 
	0, 369, 369, 369, 369, 369, 369, 369, 
	377
};

static const int PostProcess_start = 219;
static const int PostProcess_first_final = 219;
static const int PostProcess_error = 0;

static const int PostProcess_en_rettype = 279;
static const int PostProcess_en_retval = 304;
static const int PostProcess_en_retvals = 308;
static const int PostProcess_en_mtocsubst = 312;
static const int PostProcess_en_main = 219;


#line 180 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"


class PostProcess {

private:
  string docdir_;
  int          line            , col;
  char        *ts              , *te;
  int          act             , have;
  int          cs;
  int          top;
  int          stack[5];
  bool         only_retval;
  bool         quiet_;
  bool         dry_run_;

public:
  /**
   * @class PostProcess
   *
   * @change{1,2,dw,2011-11-04} Changed the postprocessor interface from taking a single file argument to
   * assuming the passed string to be a folder whos contents are to be postprocessed.
   */
  // constructor
  PostProcess(const string &docdir, const bool quiet_flag, const bool dry_run_flag) :
    docdir_(docdir),
    line(1),
    ts(0), te(0), have(0),
    top(0), only_retval(false),
    quiet_(quiet_flag),
    dry_run_(dry_run_flag)
  { }

  int execute()
  {
    DIR *dp;
    if ((dp  = opendir(docdir_.c_str())) == NULL) {
      cerr << "Error opening directory " << docdir_ << endl;
      return -1;
    }

    struct dirent* dirp;
    string file;
    while ((dirp = readdir(dp)) != NULL) {
      file = string(dirp->d_name);
      // Process only html files
      if (file.substr(file.find_last_of(".") + 1) == "tex"
    		  || file.substr(file.find_last_of(".") + 1) == "js"
    		  || (file.substr(file.find_last_of(".") + 1) == "html" && file.find("8rl") == string::npos)) {
        postprocess(docdir_ + string("/") + file);
      }
    }
    closedir(dp);
    return 0;
  }

  // run postprocessor
  int postprocess(string file)
  {
    std::ios::sync_with_stdio(false);

    
#line 932 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
	{
	cs = PostProcess_start;
	top = 0;
	ts = 0;
	te = 0;
	act = 0;
	}

#line 242 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"

    ifstream is;
    try {
      is.open(file.c_str());
    } catch (std::ifstream::failure e) {
      cerr << "Exception opening/reading file";
      exit(-1);
    }

    is.seekg(0, ios_base::end);
    int length = is.tellg();
    is.seekg(0, ios_base::beg);

    char* buf = new char[(int)(1.1*length)];
    char* p = buf;
//    char * tmp_p = p;

    is.read(buf, length);
    is.close();
    
    
    ofstream fout2;
    if (!dry_run_)
    {
      try {
        fout2.open(file.c_str(), ios_base::trunc);
      } catch (std::ofstream::failure e) {
        cerr << "Exception opening/writing file";
        exit(-1);
      }
    }
    
    std::ostream * fout_ptr;
    
    if (dry_run_)
      fout_ptr = &std::cout;
    else
      fout_ptr = &fout2;
    std::ostream & fout = *fout_ptr; 

    int len = is.gcount();
    char *pe = p + len;
    char *eof = pe;

    
#line 987 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_acts = _PostProcess_actions + _PostProcess_from_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{ts = p;}
	break;
#line 1008 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
		}
	}

	_keys = _PostProcess_trans_keys + _PostProcess_key_offsets[cs];
	_trans = _PostProcess_index_offsets[cs];

	_klen = _PostProcess_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _PostProcess_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _PostProcess_indicies[_trans];
_eof_trans:
	cs = _PostProcess_trans_targs[_trans];

	if ( _PostProcess_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _PostProcess_actions + _PostProcess_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{te = p+1;}
	break;
	case 3:
#line 60 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 4:
#line 63 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << '.' << *(te-1); }}
	break;
	case 5:
#line 69 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{fout << *ts;}}
	break;
	case 6:
#line 72 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout.write(ts, te-ts); }}
	break;
	case 7:
#line 75 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ p--; {cs = stack[--top]; goto _again;} }}
	break;
	case 8:
#line 76 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ p -=4; {cs = stack[--top]; goto _again;} }}
	break;
	case 9:
#line 60 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;}
	break;
	case 10:
#line 66 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te-ts); }}
	break;
	case 11:
#line 69 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{fout << *ts;}}
	break;
	case 12:
#line 69 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{fout << *ts;}}
	break;
	case 13:
#line 81 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ {stack[top++] = cs; cs = 279; goto _again;} }}
	break;
	case 14:
#line 95 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{
                  if(only_retval) { fout << " ="; }
                  {cs = stack[--top]; goto _again;}
                }}
	break;
	case 15:
#line 104 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 16:
#line 109 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 17:
#line 81 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ {stack[top++] = cs; cs = 279; goto _again;} }}
	break;
	case 18:
#line 86 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{
      if (*p == '&')
        fout << " <span class=\"paramname\">";
      fout.write(ts+1, te-ts-1);
      if (*p == '&')
        fout << "</span>";
    }}
	break;
	case 19:
#line 101 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te - ts); }}
	break;
	case 20:
#line 81 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ {stack[top++] = cs; cs = 279; goto _again;} }}
	break;
	case 21:
#line 115 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 22:
#line 117 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ {stack[top++] = cs; cs = 304; goto _again;} }}
	break;
	case 23:
#line 119 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << "] ="; {cs = 219; goto _again;} }}
	break;
	case 24:
#line 123 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << ",<br class=\"typebreak\"/>\n"; }}
	break;
	case 25:
#line 124 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << ", "; }}
	break;
	case 26:
#line 127 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout.write(ts, te-ts); }}
	break;
	case 27:
#line 129 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 28:
#line 117 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ {stack[top++] = cs; cs = 304; goto _again;} }}
	break;
	case 29:
#line 122 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te - ts); }}
	break;
	case 30:
#line 127 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te-ts); }}
	break;
	case 31:
#line 117 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ {stack[top++] = cs; cs = 304; goto _again;} }}
	break;
	case 32:
#line 127 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ fout.write(ts, te-ts); }}
	break;
	case 33:
#line 135 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 34:
#line 139 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << "&gt;"; {cs = 219; goto _again;} }}
	break;
	case 35:
#line 141 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ {cs = 219; goto _again;} }}
	break;
	case 36:
#line 135 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;}
	break;
	case 37:
#line 137 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te-ts); }}
	break;
	case 38:
#line 135 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}}
	break;
	case 39:
#line 137 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ fout.write(ts, te-ts); }}
	break;
	case 40:
#line 146 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{act = 26;}
	break;
	case 41:
#line 149 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{act = 27;}
	break;
	case 42:
#line 167 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{act = 34;}
	break;
	case 43:
#line 170 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{act = 35;}
	break;
	case 44:
#line 146 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << "function ["; only_retval = false; {cs = 308; goto _again;} }}
	break;
	case 45:
#line 149 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << "function "; only_retval = true; {stack[top++] = cs; cs = 304; goto _again;} fout << " ="; }}
	break;
	case 46:
#line 152 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{fout << "function ";}}
	break;
	case 47:
#line 155 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ {cs = 312; goto _again;} }}
	break;
	case 48:
#line 157 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << '.'; {cs = 312; goto _again;} }}
	break;
	case 49:
#line 160 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;}
	break;
	case 50:
#line 163 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout.write(ts, 1); }}
	break;
	case 51:
#line 164 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout.write(ts, 4); }}
	break;
	case 52:
#line 167 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << '.' << *(te-1); }}
	break;
	case 53:
#line 172 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{ fout << ")"; }}
	break;
	case 54:
#line 175 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p+1;{fout << *ts;}}
	break;
	case 55:
#line 149 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout << "function "; only_retval = true; {stack[top++] = cs; cs = 304; goto _again;} fout << " ="; }}
	break;
	case 56:
#line 152 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{fout << "function ";}}
	break;
	case 57:
#line 160 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;}
	break;
	case 58:
#line 167 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout << '.' << *(te-1); }}
	break;
	case 59:
#line 170 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{ fout.write(ts, te-ts); }}
	break;
	case 60:
#line 175 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{te = p;p--;{fout << *ts;}}
	break;
	case 61:
#line 149 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ fout << "function "; only_retval = true; {stack[top++] = cs; cs = 304; goto _again;} fout << " ="; }}
	break;
	case 62:
#line 152 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{fout << "function ";}}
	break;
	case 63:
#line 167 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ fout << '.' << *(te-1); }}
	break;
	case 64:
#line 170 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{ fout.write(ts, te-ts); }}
	break;
	case 65:
#line 175 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"
	{{p = ((te))-1;}{fout << *ts;}}
	break;
	case 66:
#line 1 "NONE"
	{	switch( act ) {
	case 26:
	{{p = ((te))-1;} fout << "function ["; only_retval = false; {cs = 308; goto _again;} }
	break;
	case 27:
	{{p = ((te))-1;} fout << "function "; only_retval = true; {stack[top++] = cs; cs = 304; goto _again;} fout << " ="; }
	break;
	case 34:
	{{p = ((te))-1;} fout << '.' << *(te-1); }
	break;
	case 35:
	{{p = ((te))-1;} fout.write(ts, te-ts); }
	break;
	}
	}
	break;
#line 1357 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
		}
	}

_again:
	_acts = _PostProcess_actions + _PostProcess_to_state_actions[cs];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{ts = 0;}
	break;
#line 1370 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/build/postprocess.cc"
		}
	}

	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	if ( _PostProcess_eof_trans[cs] > 0 ) {
		_trans = _PostProcess_eof_trans[cs] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 287 "/xchip/cogs/narayan/code/github/mortar/ext/mtocpp/src/postprocess.rl"

    /* Check if we failed. */
    if ( cs == PostProcess_error )
    {
      /* Machine failed before finding a token. */
      cerr << file << ": PARSE ERROR " << endl;
      cerr.write(p, 100);
      exit(-1);
    }

    if (!dry_run_)
      fout2.close();
    delete buf;

    return 0;
  }
};

void usage()
{
  cout << "mtocpp_post Version " << MTOCPP_VERSION_MAJOR << "."
    << MTOCPP_VERSION_MINOR << endl;
  cout << "Usage: mtocpp_post [-q] target" << endl;
  cout << "\nOptions:\n  -q\t\tsuppresses debug output.\n" << endl;
  cout << "  -f\t\tsingle file argument instead of directory." << endl;
}

/**
 * @change{dw,1,4,2012-11-19} Re-Added the possibility to directly specify a file target instead of a whole folder.
 */
int main(int argc, char ** argv)
{
  bool quiet = false;
  bool dry_run = false;
  bool isfile = false;
  string docdir;
  if(argc >= 2)
  {
    if (std::string("--help") == std::string(argv[1]))
    {
      usage();
      return 0;
    }
    if (argc == 3 && std::string("-q") == std::string(argv[1]))
    {
      quiet = true;
      docdir = argv[2];
    }
    else if (argc == 3 && std::string("-d") == std::string(argv[1]))
    {
      dry_run = true;
      docdir = argv[2];
    }
    else if (argc == 3 && std::string("-f") == std::string(argv[1]))
	{
	  isfile = true;
	  docdir = argv[2];
	}
    else if (argc == 3 && (std::string("-qf") == std::string(argv[1]) || std::string("-fq") == std::string(argv[1])))
	{
	  isfile = true;
	  quiet = true;
	  docdir = argv[2];
	}
    else if(argc == 2)
      docdir = argv[1];
    else
    {
      cerr << "wrong arguments!" << endl;
      usage();
      exit(-2);
    }
  }
  else
  {
    cerr << "wrong number of arguments!" << endl;
    usage();
    exit(-2);
  }

  if (!quiet) {
	  if (isfile) {
		  cout << "Running mtoc++ postprocessor on file " << docdir << endl;
	  } else {
		  cout << "Running mtoc++ postprocessor on directory " << docdir << endl;
	  }
  }

  PostProcess scanner(docdir, quiet, dry_run);
  if (isfile) {
	  scanner.postprocess(docdir);
  } else {
	  scanner.execute();
  }
  return 0;
}

/* vim: set et sw=2 ft=ragel: */

