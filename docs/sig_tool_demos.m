%% 1. Run Cmap queries against a LINCS-L1000 dataset
% The queryl1k tool computes a set-based enrichment
% similarity between input genesets (aka queries) and a small subset of
% L1000 perturbational gene-expression signatures. (Note that while the
% tool is optimized for datasets generated by the L1000 platform, any
% perturbational dataset can be used).
% 
% The algorithm operates as follows. First raw similarity (connectivity)
% scores between a query and CMap signatures are computed. While query
% methodology is agnostic to the specific similarity metric, the default
% choice is a non-parametric, two-tailed weighted gene-set enrichment score
% (Subramanian, A. et al. Cell 2017).
% 
% The raw scores are then scaled (normalized) by the signed-means to allow
% for comparisons across different queries.
% 
% Finally the statistical significance of the connections adjusted for
% multiple hypotheses is estimated. FDR q-values are estimated by comparing
% the distributions of treatments to null signatures in the dataset.

DATASET_PATH = fullfile(cmapmpath, 'demo-datasets');

% Queries
UP_GENESET = fullfile(DATASET_PATH, 'queries/genesets/dexamethasone_resistance_up.gmt');
DOWN_GENESET = fullfile(DATASET_PATH, '/queries/genesets/dexamethasone_resistance_down.gmt');

% Gene Expression Dataset
% Differential expression score matrix
SCORE_FILE = fullfile(DATASET_PATH, '/l1000/m2.subset.10k/level5_modz.bing_n10000x10174.gctx');
% Corresponding rank matrix
RANK_FILE = fullfile(DATASET_PATH, 'l1000/m2.subset.10k/rank.bing_n10000x10174.gctx');
% Signature annotations
SIG_META_FILE = fullfile(DATASET_PATH, 'l1000/m2.subset.10k/siginfo.txt');
% results folder
OUT_PATH = 'results/queryl1k';

% Run the queryl1k tool
sig_queryl1k_tool('up', UP_GENESET,...
    'down', DOWN_GENESET,...
    'score', SCORE_FILE,...
    'rank', RANK_FILE,...
    'sig_meta', SIG_META_FILE,...
    'max_col', 50000,...
    'create_subdir', 0,...
    'out', OUT_PATH)

%% 2. Run preranked set enrichment on a query result
% The GSEA Preranked tool computes set-based enrichment analysis against a
% user-defined rank-ordered dataset. It determines whether a priori defined
% sets show statistically significant enrichment at either end of the
% ranking.

% Signature sets
SIG_SET = fullfile(DATASET_PATH, 'queries/sigsets/cmap_sig_sets_n9380.gmt');
% Set annotations
QUERY_META_FILE = fullfile(DATASET_PATH, 'queries/sigsets/cmap_sig_sets_info.txt');
% Query result scores (Normalized connectivities)
SCORE_FILE = fullfile(DATASET_PATH, 'pre_computed_results/queryl1k/science_queries/arfs/DEX/query_result.gct');
% results folder
OUT_PATH = 'results/gseapreranked';

% Run the gseapreranked tool
sig_gseapreranked_tool('up', SIG_SET,...
    'score', SCORE_FILE,...
    'query_meta', QUERY_META_FILE,...
    'create_subdir', 0,...
    'out', OUT_PATH);

%% 3. Run set-based connectivity analysis on cell viability data using Curie
% The Curie tool computes a set-based enrichment similarity between input
% cell-line sets (aka queries) and a perturbational cell-fitness signature
% dataset. Note that while the tool is optimized for datasets generated by
% the PRISM platform, any high-dimensional cell-fitness dataset can be
% used.

% Queries (Cell line sets)
CELL_SET = fullfile(DATASET_PATH, 'queries/cellsets/curated_cellsets_n5.gmt');

% Cell viability data
% Cell fitness scores
SCORE_FILE = fullfile(DATASET_PATH, 'prism/repurposing-secondary/level5_modz.zspc.sqrtaud_n1258x489.gctx');
% Corresponding rank matrix
RANK_FILE = fullfile(DATASET_PATH, 'prism/repurposing-secondary/rank_n1258x489.gctx');
% Signature annotations
SIG_META_FILE = fullfile(DATASET_PATH, 'prism/repurposing-secondary/siginfo.txt');
% results folder
OUT_PATH = 'results/curie';

% Run the curie tool
sig_curie_tool('es_tail', 'up',...
    'up', CELL_SET,...
    'score', SCORE_FILE,...
    'rank', RANK_FILE,...
    'sig_meta', SIG_META_FILE,...
    'create_subdir', 0,...
    'out', OUT_PATH);